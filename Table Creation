/*
  Class Creation
*/
/*------------------------------------------------------------------
  Maintence_Item

  A maintenance service that Dave’s offers.
	Note: name has been changed to Mname due to query name conflict.
--------------------------------------------------------------------*/
CREATE TABLE Maintenance_Item (
	mName VARCHAR(40) NOT NULL,
	laborHours int,

	PRIMARY KEY maintenance_item_pk (mName),
);
 /*------------------------------------------------------------------
  Part_Maintenance

  A particular part as used within a given maintenance item.
--------------------------------------------------------------------*/
CREATE TABLE Part_Maintenance (
	mName VARCHAR(40) NOT NULL,
	partSerialNum int NOT NULL,

	PRIMARY KEY part_maintenance_pk (mName, partSerialNum),
	CONSTRAINT maintenance_item_part_maintenance_fk FOREIGN KEY (mName) REFERENCES Maintenance_Item(mName),
	CONSTRAINT part_at_Daves_part_maintenance_fk FOREIGN KEY (partSerialNum) REFERENCES part_at_Daves (serialNum)
);

 /*------------------------------------------------------------------
  Part_at_Daves

  A part that Dave’s has on hand for use in maintenance items.
--------------------------------------------------------------------*/
CREATE TABLE Part_at_Daves (
	orderedFromID int NOT NULL,
	serialNum int NOT NULL,

	PRIMARY KEY Part_at_Daves_pk (serialNum),
	CONSTRAINT Part_Order_Part_at_Daves_fk FOREIGN KEY (orderedFromID) REFERENCES Part_Order (orderID)
);

 /*------------------------------------------------------------------
	Part_Order
--------------------------------------------------------------------*/
CREATE TABLE Part_Order (
	orderID int NOT NULL AUTO_INCREMENT,
	partName VARCHAR(50) NOT NULL,
	supplierName VARCHAR(50) NOT NULL, 
	date DATE,
	quantity int,
	priceForOne int,

	PRIMARY KEY Part_Order_pk (orderID),
	CONSTRAINT part_part_order_fk FOREIGN KEY (partName) REFERENCES Part (name),
	CONSTRAINT supplier_part_prder_fk FOREIGN KEY (supplierName) REFERENCES Supplier(supplierName),
	CONSTRAINT Part_Order_ck UNIQUE (partName, supplierName, date),
);

 /*------------------------------------------------------------------
	Merchandise_Item_Order
--------------------------------------------------------------------*/
CREATE TABLE Merchandise_Item_Order (
	merchandiseOrderID int NOT NULL AUTO_INCREMENT,
	supplierName VARCHAR(50) NOT NULL,
	merchandiseItem VARCHAR(50) NOT NULL,
	date Date,
	quantity int,
	priceForOne int,

	PRIMARY KEY Merchandise_Item_Order_pk (merchandiseOrderID),
	CONSTRAINT supplier_merchandise_item_order_fk FOREIGN KEY (supplierName) REFERENCES Supplier(supplierName),
	CONSTRAINT merchandise_merchandise_item_order_fk FOREIGN KEY (merchandiseItem) REFERENCES Merchandise(name),
	CONSTRAINT Merchandise_Item_Order_ck UNIQUE (supplierName, merchandiseItem, date)
);
 /*------------------------------------------------------------------
	Merchandise_Item_Instore
--------------------------------------------------------------------*/
CREATE TABLE Merchandise_Item_InStore (
	orderedFromID int NOT NULL,
	serialNum int NOT NULL,

	PRIMARY KEY Merchandise_Item_InStore_pk (serialNum),
	CONSTRAINT Merchandise_Item_Order_Merchandise_Item_InStore_fk FOREIGN KEY (orderedFromID) REFERENCES Merchandise_Item_Order (merchandiseOrderID)
);
/*------------------------------------------------------------------
 Merchandise
--------------------------------------------------------------------*/
CREATE TABLE Merchandise (
	name VARCHAR(50) NOT NULL,

	PRIMARY KEY Merchandise_pk (name)
);

 /*------------------------------------------------------------------
	Supplier
--------------------------------------------------------------------*/
CREATE TABLE Supplier (
	name VARCHAR(50) NOT NULL,
	email VARCHAR(20),
	phone VARCHAR(12),

	PRIMARY KEY Supplier_pk (name)
);

 /*------------------------------------------------------------------
	Part
--------------------------------------------------------------------*/
CREATE TABLE Part (
	name VARCHAR(50) NOT NULL,

	PRIMARY KEY Part_pk (name)
);
 /*------------------------------------------------------------------
    Maint_Item_Work
--------------------------------------------------------------------*/
CREATE TABLE Maintenance_Item_Work (
	itemWorkID int NOT NULL AUTO_INCREMENT,
	mechanicID int NOT NULL,
	ST_ID int NOT NULL,
	custID int NOT NULL,
	date Date NOT NULL,
	vehicleID int NOT NULL,
	maint_item_name VARCHAR(40) NOT NULL,
	finalCost int,

	PRIMARY KEY Maintenance_Item_Work_pk (itemWorkID),
	CONSTRAINT Employee_Maintenance_Item_Work_fk FOREIGN KEY (mechanicID) REFERENCES Employee (employeeID),
	CONSTRAINT visit_Maintenance_Item_Work_fk FOREIGN KEY (ST_ID, custID, date, vehicleID) REFERENCES Visit (ST_ID, custID, date, vehicleID),
	CONSTRAINT Vehicle_Maintenance_Maintenance_Item_Work_fk FOREIGN KEY (vehicleID, maint_item_name) REFERENCES Vehicle_Maintenance (vehicleID, maint_item_name),
	CONSTRAINT Maintenance_Item_Work_ck UNIQUE (mechanicID, ST_ID, custID, date, vehicleID, maint_item_name)
);

 /*------------------------------------------------------------------
	Merchandise_Purchase
--------------------------------------------------------------------*/
CREATE TABLE Merchandise_Purchase (
	purchaseID int NOT NULL AUTO_INCREMENT,
	ST_ID int NOT NULL,
	custID int NOT NULL,
	date Date NOT NULL,
	vehicleID int NOT NULL,
	itemSerialNum int NOT NULL,

	PRIMARY KEY Merchandise_Purchase_pk (purchaseID),
	CONSTRAINT visit_Merchandise_Purchase_fk FOREIGN KEY (ST_ID, custID, date, vehicleID) REFERENCES Visit (ST_ID, custID, date, vehicleID),
	CONSTRAINT Merchandise_Item_InStore_Merchandise_Purchase_fk FOREIGN KEY (itemSerialNum) REFERENCES Merchandise_Item_InStore (serialNum),
	CONSTRAINT Merchandise_Purchase_ck UNIQUE (ST_ID, custID, date, vehicleID, itemSerialNum)
);

 /*------------------------------------------------------------------
	Visit
--------------------------------------------------------------------*/
CREATE TABLE Visit (
	ST_ID int NOT NULL,
	custID int NOT NULL,
	date Date NOT NULL,
	vehicleID int NOT NULL,
	pointsUsed int,

	PRIMARY KEY Visit_pk (ST_ID, custID, date, vehicleID),
	CONSTRAINT Employee_Visit_fk FOREIGN KEY (ST_ID) REFERENCES Employee (employeeID),
	CONSTRAINT Vehicle_Owner_Visit_fk FOREIGN KEY (custID, vehicleID) REFERENCES Vehicle_Owner (custID, vehicleID)
);

 /*------------------------------------------------------------------
	Maintenance_Interval_Item
--------------------------------------------------------------------*/
CREATE TABLE Maintenance_Interval_Item (
	numMiles int NOT NULL,
	vehicleID int NOT NULL,
	maint_item_name VARCHAR(40) NOT NULL,

	PRIMARY KEY Maintenance_Interval_Item_pk (numMiles, vehicleID, maint_item_name),
	CONSTRAINT Vehicle_Interval_Maintenance_Interval_Item_fk FOREIGN KEY (numMiles, vehicleID) REFERENCES Vehicle_Interval (milesDriven, vehicleID),
	CONSTRAINT Vehicle_Maintenance_Maintenance_Interval_Item_fk FOREIGN KEY (vehicleID, maint_item_name) REFERENCES Vehicle_Maintenance (vehicleID, maint_item_name)
);

 Maint_Pack_Item
--------------------------------------------------------------------*/
CREATE TABLE Maintenanace_Pack_Item (
	packID int NOT NULL AUTO_INCREMENT,
	mechanicID int NOT NULL,
	ST_ID int NOT NULL,
	custID int NOT NULL,
	date Date NOT NULL,
	vehicleID int NOT NULL,
	maint_item_name VARCHAR(40) NOT NULL,
	numMiles int NOT NULL,
	finalCost int,

	PRIMARY KEY Maintenanace_Pack_Item_pk (packID),
	CONSTRAINT Employee_Maintenanace_Pack_Item_fk FOREIGN KEY (mechanicID) REFERENCES Employee(employeeID),
	CONSTRAINT Visit_Maintenanace_Pack_Item_fk FOREIGN KEY (ST_ID, custID, date, vehicleID) REFERENCES Visit (ST_ID, custID, date, vehicleID),
	CONSTRAINT Maintenance_Interval_Item_Maintenanace_Pack_Item_fk FOREIGN KEY (vehicleID, maint_item_name, numMiles) REFERENCES Maintenanace_Pack_Item (vehicleID, maint_item_name, numMiles),
	CONSTRAINT Maintenanace_Pack_Item_ck UNIQUE (mechanicId, ST_ID, custID, date, vehicleID, maint_item_name)
);
 /*------------------------------------------------------------------
 Employee
--------------------------------------------------------------------*/
CREATE TABLE Employee (
	employeeID int NOT NULL AUTO_INCREMENT,
	type VARCHAR(35) NOT NULL,
	firstName VARCHAR(20) NOT NULL,
	lastName VARCHAR(20) NOT NULL,
	phone VARCHAR(15) NOT NULL,

	PRIMARY KEY Employee_pk (employeeID),
	CONSTRAINT Employee_Type_Employee_fk FOREIGN KEY (type) REFERENCES Employee_Type (type),
	CONSTRAINT Employee_ck UNIQUE (firstName, lastName, phone)
);

 /*------------------------------------------------------------------
 Certified_Mechanic
--------------------------------------------------------------------*/
CREATE TABLE Certified_Mechanic(
	employeeID int NOT NULL,

	PRIMARY KEY Certified_Mechanic_pk (employeeID),
	CONSTRAINT Employee_Certified_Mechanic_fk FOREIGN KEY (employeeID) REFERENCES Employee (employeeID)
);

 /*------------------------------------------------------------------
 Specific_Cert
--------------------------------------------------------------------*/
CREATE TABLE Specific_Cert(
	employeeID int NOT NULL,
	cert_name VARCHAR(60) NOT NULL,

	PRIMARY KEY Specific_Cert_pk (employeeID, cert_name),
	CONSTRAINT Certified_Mechanic_Specific_Cert_fk FOREIGN KEY (employeeID) REFERENCES Certified_Mechanic (employeeID),
	CONSTRAINT Certification_Specific_Cert_fk FOREIGN KEY (cert_name) REFERENCES Certification (name)
);
 /*------------------------------------------------------------------
 Certification
--------------------------------------------------------------------*/
CREATE TABLE Certification(
	name VARCHAR(60) NOT NULL,
	skill VARCHAR(40),

	PRIMARY KEY Certification_pk (name),
);

 /*------------------------------------------------------------------
 Skill
--------------------------------------------------------------------*/
CREATE TABLE Skill(
	skillName VARCHAR(45) NOT NULL,

	PRIMARY KEY Skill_pk (skillName)
);

 /*------------------------------------------------------------------
 Mechanic_Skill
--------------------------------------------------------------------*/
CREATE TABLE Mechanic_Skill(
	skill VARCHAR(45) NOT NULL,
	employeeID int NOT NULL,

	PRIMARY KEY Mechanic_Skill_pk (skill, employeeID),
	CONSTRAINT Skill_Mechanic_Skill_fk FOREIGN KEY (skill) REFERENCES Mechanic_Skill (skillName),
	CONSTRAINT Employee_Mechanic_Skill_fk FOREIGN KEY (employeeID) REFERENCES Employee (employeeID)
);

 /*------------------------------------------------------------------
 Mentorship
--------------------------------------------------------------------*/
CREATE TABLE Mentorship(
	mentorSkill VARCHAR(45) NOT NULL,
	mentorEmployeeID int NOT NULL,
	employeeID int NOT NULL,

	PRIMARY KEY Mentorship_pk (mentorSkill, mentorEmployeeID, employeeID),
	CONSTRAINT Mechanic_Skill_Mentorship_fk FOREIGN KEY (mentorSkill, mentorEmployeeID) REFERENCES Mechanic_Skill (skill, employeeID),
	CONSTRAINT Employee_Mentorship_fk FOREIGN KEY (employeeID) REFERENCES Employee (employeeID)
);

 /*------------------------------------------------------------------
 Employee_of_The_Month
--------------------------------------------------------------------*/
CREATE TABLE Employee_of_The_Month(
	month int NOT NULL,
	year int NOT NULL,
	employeeID int NOT NULL,

	PRIMARY KEY Employee_of_The_Month_pk (month, year, employeeID),
	CONSTRAINT Employee_Employee_of_The_Month_fk FOREIGN KEY (employeeID) REFERENCES Employee (employeeID)
);

 /*------------------------------------------------------------------
 Reward
--------------------------------------------------------------------*/
CREATE TABLE Reward(
	name VARCHAR(50) NOT NULL,
	description VARCHAR(100),

	PRIMARY KEY Reward_pk (name)
);

 /*------------------------------------------------------------------
 Employee_Reward
--------------------------------------------------------------------*/
CREATE TABLE Employee_Reward(
	rewardName VARCHAR(50) NOT NULL,
	monthAwarded int NOT NULL,
	yearAwarded int NOT NULL,
	employeeID int NOT NULL,

	PRIMARY KEY Employee_Reward_pk (rewardName, monthAwarded, yearAwarded, employeeID),
	CONSTRAINT Reward_Employee_Reward_fk FOREIGN KEY (rewardName) REFERENCES Reward (name),
	CONSTRAINT Employee_of_The_Month_Employee_Reward FOREIGN KEY (monthAwarded, yearAwarded, employeeID) REFERENCES Employee_of_The_Month (month, year, employeeID)
);
/*------------------------------------------------------------------
Employee_Reward
--------------------------------------------------------------------*/
CREATE TABLE Employee_Type(
  type VARCHAR(50) NOT NULL,
  
  PRIMARY KEY Employee_Type_pk (type)
);
 /*------------------------------------------------------------------
 Hours_per_Year
--------------------------------------------------------------------*/
CREATE TABLE Hours_per_Year(
	employeeID int NOT NULL,
	year int NOT NULL,
	hoursWorked int,

	PRIMARY KEY Hours_per_Year_pk (employeeID, year),
	CONSTRAINT Employee_Hours_per_Year_fk FOREIGN KEY (employeeID) REFERENCES Employee (employeeID)
);

 /*------------------------------------------------------------------
 Past
--------------------------------------------------------------------*/
CREATE TABLE Past(
	employeeID int NOT NULL,
	endDate Date, 
	tierNumber int,

	PRIMARY KEY Past_pk (employeeID),
	CONSTRAINT Employee_Past_fk FOREIGN KEY (employeeID) REFERENCES Employee (employeeID),
	CONSTRAINT Retirement_Tier_Past_fk FOREIGN KEY (tierNumber) REFERENCES Retirement_Tier (tierNumber)
);

 /*------------------------------------------------------------------
 Present
--------------------------------------------------------------------*/
CREATE TABLE Present(
 	employeeID int NOT NULL,
 	startDate Date,
 	tierNumber int,

 	PRIMARY KEY Present_pk (employeeID),
 	CONSTRAINT Employee_Present_fk FOREIGN KEY (employeeID) REFERENCES Employee (employeeID),
	CONSTRAINT Benefits_Tier_Present_fk FOREIGN KEY (tierNumber) REFERENCES Benefits_Tier (tierNumber)
 );
------------------------
 Benefits_Tier
--------------------------------------------------------------------*/
CREATE TABLE Benefits_Tier(
	tierNumber int NOT NULL,
	vacationPerHourRate Decimal (3,2),
	sickPerHourRate Decimal (3,2), 
	minYearsOnJob int, 

	PRIMARY KEY Benefits_Tier_pk (tierNumber)
);

 /*------------------------------------------------------------------
 Retirement_Tier
--------------------------------------------------------------------*/
CREATE TABLE Retirement_Tier(
  tierNumber int NOT NULL,
  baseDollarRate int,
  minYearsOnJob int,

  PRIMARY KEY Retirement_Tier_pk (tierNumber) 
);

 /*------------------------------------------------------------------
 Safety_Class
--------------------------------------------------------------------*/
CREATE TABLE Safety_Class(
	date Date NOT NULL, 
	classNumber int,

	PRIMARY KEY Safety_Class_pk (date)
);


 /*------------------------------------------------------------------
 Safety_Class_Attendee
--------------------------------------------------------------------*/
CREATE TABLE Safety_Class_Attendee(
	employeeID int NOT NULL,
	classDate Date NOT NULL,

	PRIMARY KEY Safety_Class_Attendee_pk (employeeID, classDate),
	CONSTRAINT Safety_Class_Safety_Class_Attendee_fk FOREIGN KEY (classDate) REFERENCES Safety_Class (date),
	CONSTRAINT Employee_Safety_Class_Attendee FOREIGN KEY (employeeID) REFERENCES Employee (employeeID)
);

 /*------------------------------------------------------------------
Vehicle
--------------------------------------------------------------------*/
CREATE TABLE Vehicle(
	vehicleID int NOT NULL AUTO_INCREMENT,
	make VARCHAR(30) NOT NULL,
	model VARCHAR(30) NOT NULL,
	year int NOT NULL,

	PRIMARY KEY Vehicle_pk (vehicleID),
	CONSTRAINT Vehicle_ck UNIQUE (make, model, year)
);

 /*------------------------------------------------------------------
Customer
--------------------------------------------------------------------*/
CREATE TABLE Customer(
	custID int NOT NULL AUTO_INCREMENT,
	phone VARCHAR(12) NOT NULL,
	email VARCHAR (50) NOT NULL,

	PRIMARY KEY Customer_pk (custID),
	CONSTRAINT Customer_ck 
		UNIQUE (phone, email)
);
 /*------------------------------------------------------------------
Vehicle_Owner
--------------------------------------------------------------------*/
CREATE TABLE Vehicle_Owner(
	custID int NOT NULL,
	vehicleID int NOT NULL,
	licensePlate VARCHAR (10),
	startMileage int,
	milesPerYear int,

	PRIMARY KEY Vehicle_Owner_pk (custID, vehicleID),
	CONSTRAINT Customer_Vehicle_Owner_fk FOREIGN KEY (custID) REFERENCES Customer (custID),
	CONSTRAINT Vehicle_Vehicle_Owner_fk FOREIGN KEY (vehicleID) REFERENCES Vehicle (vehicleID)
);

 /*------------------------------------------------------------------
ZipArea
--------------------------------------------------------------------*/
CREATE TABLE ZipArea(
	zipcode int NOT NULL,
	city VARCHAR(40) NOT NULL,
	state VARCHAR (40) NOT NULL,

	PRIMARY ZipArea_pk (zipcode),
	CONSTRAINT ZipArea_ck UNIQUE (city, state)
);

 /*------------------------------------------------------------------
Individual
--------------------------------------------------------------------*/
CREATE TABLE Individual(
	custID int NOT NULL,
	firstName VARCHAR (40) NOT NULL,
	lastName VARCHAR (40) NOT NULL,
	street VARCHAR (40) NOT NULL,
	zipcode int NOT NULL,

	PRIMARY KEY Individual_pk (custID),
	CONSTRAINT Customer_Individual_fk FOREIGN KEY (custID) REFERENCES Customer (custID),
	CONSTRAINT ZipArea_Individual_fk FOREIGN KEY (zipcode) REFERENCES ZipArea (zipcode),
	CONSTRAINT Individual_ck UNIQUE (firstName, lastName, street)
);

 /*------------------------------------------------------------------
Business
--------------------------------------------------------------------*/
CREATE TABLE Business(
	custID int NOT NULL,
	name VARCHAR(100) NOT NULL,

	PRIMARY KEY Business_pk (custID),
	CONSTRAINT Customer_Business_fk FOREIGN KEY (custID) REFERENCES Customer (custID),
	CONSTRAINT Business_ck UNIQUE (name)
);

/*------------------------------------------------------------------
Address
--------------------------------------------------------------------*/
CREATE TABLE Address(
	custID int NOT NULL,
	street VARCHAR (50) NOT NULL,
	zipcode int NOT NULL,
	addressType VARCHAR (30),

	PRIMARY KEY Address_pk (custID, street),
	CONSTRAINT Business_Address_fk FOREIGN KEY (custID) REFERENCES Business (custID),
	CONSTRAINT ZipArea_Address_fk FOREIGN KEY (zipcode) REFERENCES ZipArea (zipcode) 
);

 /*------------------------------------------------------------------
Referred
--------------------------------------------------------------------*/
CREATE TABLE Referred(
	custID int NOT NULL,

	PRIMARY KEY Referred_pk (custID),
	CONSTRAINT Customer_Referred_fk FOREIGN KEY (custID) REFERENCES Customer (custID);
);

 /*------------------------------------------------------------------
Referred_by_Steady
--------------------------------------------------------------------*/
CREATE TABLE Referred_by_Steady(
	custID int NOT NULL,
	referredByID int NOT NULL,
	referredDate Date,

	PRIMARY KEY Referred_by_Steady_pk (custID),
	CONSTRAINT Referred_Referred_by_Steady_fk FOREIGN KEY (custID) REFERENCES Referred (custID),
	CONSTRAINT Steady_Referred_by_Steady_fk FOREIGN KEY (referredByID) REFERENCES Steady (custID)
);

 /*------------------------------------------------------------------
Referred_by_Premier
--------------------------------------------------------------------*/
CREATE TABLE Referred_by_Premier(
	custID int NOT NULL,
	referredByID int NOT NULL,
	referredDate Date,

	PRIMARY KEY Referred_by_Premier_pk (custID),
	CONSTRAINT Referred_Referred_by_Premier_fk FOREIGN KEY (custID) REFERENCES Referred (custID),
	CONSTRAINT Premier_Referred_by_Premier_fk FOREIGN KEY (referredByID) REFERENCES Steady (custID)
);

 /*------------------------------------------------------------------
Steady
--------------------------------------------------------------------*/
CREATE TABLE Steady(
	custID int NOT NULL,
	registerDate Date,
	points int,
	ReferredBenefitsUsed int,

	PRIMARY KEY Steady_pk (custID),
	CONSTRAINT FOREIGN KEY Customer_Steady_fk (custID) REFERENCES Customer (custID)
);
 /*------------------------------------------------------------------
Prospective
--------------------------------------------------------------------*/
CREATE TABLE Prospective(
	custID int NOT NULL,

	PRIMARY KEY Prospective_pk (custID),
	CONSTRAINT Customer_Prospective_fk FOREIGN KEY (custID) REFERENCES Customer (custID)
);

 /*------------------------------------------------------------------
Steady_Email
--------------------------------------------------------------------*/
CREATE TABLE Steady_Email(
	custID int NOT NULL,
	vehicleID int NOT NULL,
	date DateTime NOT NULL,

	PRIMARY KEY Steady_Email_pk (date),
	CONSTRAINT Steady_Steady_Email_fk FOREIGN KEY (custID) REFERENCES Steady (custID),
	CONSTRAINT Vehicle_Owner_Steady_Email_fk FOREIGN KEY (custID, vehicleID) REFERENCES Vehicle_Owner (custID, vehicleID),
	CONSTRAINT Email_Steady_Email_fk FOREIGN KEY (date) REFERENCES Email (date)
);

 /*------------------------------------------------------------------
Prospective_Email
--------------------------------------------------------------------*/
CREATE TABLE Prospective_Email(
	custId int NOT NULL,
	date DateTime NOT NULL,
	itemSpecial VARCHAR(40) NOT NULL,

	PRIMARY KEY Prospective_Email_pk (date),
	CONSTRAINT Prospective_Prospective_Email_fk FOREIGN KEY (custID) REFERENCES Prospective (custID),
	CONSTRAINT Email_Prospective_Email_fk FOREIGN KEY (date) REFERENCES Email (date),
	CONSTRAINT Maintenance_Item_Prospective_Email_fk FOREIGN KEY (itemSpecial) REFERENCES Maintenance_Item (mName)
);
 /*------------------------------------------------------------------
Email
--------------------------------------------------------------------*/
CREATE TABLE Email(
	date DateTime NOT NULL,

	PRIMARY KEY Email_pk (date)
);

 /*------------------------------------------------------------------
Referred_by_Steady
--------------------------------------------------------------------*/
